# encrypt
# https://ci.appveyor.com/tools/encrypt
# validate
# https://ci.appveyor.com/tools/validate-yaml
# Build API
# https://www.appveyor.com/docs/build-worker-api
# https://www.appveyor.com/docs/build-configuration/#script-blocks-in-build-configuration

version: "{build}"
image: Visual Studio 2015

cache:
  - node_modules -> package.json
  - package-lock.json -> package.json

environment:
  CI_NAME: 'appveyor'
  NODEJS_VERSION: '10'
  NPM_TOKEN:
    secure: zTogpCh9AtlTR+osabCb9UMXMtIT8qTE0Rvay78bTORSysIVo5Ev+y6oOsHdDSO9
  GITHUB_TOKEN:
    secure: wMVG1uvMB8qswngCrsL0eg6E/7HEaCjbAmXFM26V+sVO1OnP1/mgMu6kGX2uCWm0

init:
  - ps: |
      $Host.UI.RawUI.ForegroundColor="White"
      $color_normal=$host.UI.RawUI.ForegroundColor
      $color_red="Red"
      $color_green="Green"
      $color_yellow="Yellow"
      $color_blue="Blue"
      $color_cyan="Cyan"
      $color_gray="Gray"
      $color_black="Black"
      $color_r=$color_red
      $color_g=$color_green
      $color_b=$color_cyan
      $color_y=$color_yellow
      #		      	    1 2                        3   45
      $color_log_reg='(<(\/[a-zA-Z]*|[a-zA-Z]+)>|(.))((\\.|[^<])*)'

      function ParseLog($message){
        return $message -replace $color_log_reg, '$3$4'
      }

      function ColorLog([string] $message = "", [switch] $NoNewLine = $false) {
        $prev_c = "normal"
        $current_c = "normal"
        [regex]::matches($message, $color_log_reg) | ForEach-Object {
          $color_name=$_.Groups[2].value
          $txt="$($_.Groups[3].value)$($_.Groups[4].value)"
          if($color_name){
            if ($color_name[0] -eq '/') {
              $color_name = $prev_c
            } else {
              $prev_c = $current_c
            }
            $current_c = $color_name
            $color=$(Get-Variable "color_$color_name" -ValueOnly)
            if ( -not $color) {
              Write-Error "invalid color: $color_name"
            }
          } else{
            $color=$color_normal
          }
          if($txt){
            Write-Host $txt -NoNewline -ForegroundColor $color
          }
        }
        if (!$NoNewLine) {
            Write-Host -ForegroundColor $color_normal;
        }
      }

      function LogDebug($message) {
        ColorLog "[<g>debug</>] <g>$message"
      }

      function LogInfo($message) {
        ColorLog "[<b> info</>] <b>$message"
        $msg=ParseLog $message
        Add-AppveyorMessage $msg -Category Information
      }

      function LogWarn($message) {
        ColorLog "[<y> warn</>] <y>$message"
        $msg=ParseLog $message
        Add-AppveyorMessage $msg -Category Warning
      }

      function LogError($message) {
        ColorLog "[<r>error</>] <r>$message"
        $msg=ParseLog $message
        Add-AppveyorMessage $msg -Category Error
      }

      $timePoints = New-Object -TypeName System.Collections.ArrayList
      function StartTime() {
        $timePoints.add($(GET-DATE))|Out-Null
      }

      function EndTime() {
        if (!$timePoints.COUNT) {
          LogError("should be call StartTimeLog before EndTimeLog")
          exit 1
        }
        $start = $timePoints[$timePoints.COUNT - 1]
        $timePoints.removeAt($timePoints.COUNT - 1)
        return $(New-TimeSpan $start).TotalSeconds
      }

      function StartTimeInfo($message) {
        StartTime
        LogInfo $message
      }

      function EndTimeInfo($message) {
        LogInfo "$message use <y>$(EndTime)s"
      }

      function StartTimeDebug($message) {
        StartTime
        LogDebug $message
      }

      function EndTimeDebug($message) {
        LogDebug "$message use <y>$(EndTime)s"
      }

      function ExitErron($cond, $code, $message) {
        if ($cond) {
          LogError $message
          $host.SetShouldExit($code)
          exit $code
        }
      }
  - git config --global core.autocrlf input

install:
  # install nodejs
  - ps: Install-Product node $env:NODEJS_VERSION
  - ps: |
      LogInfo "The build worker image is $env:APPVEYOR_BUILD_WORKER_IMAGE"
      LogInfo "The node version is $(node --version)"
      LogInfo "The npm version is $(npm --version)"

  # install dependencies
  - ps: StartTimeInfo "Installing develop dependencies..."
  - npm install -g codecov
  - npm install
  - ps: EndTimeInfo "Install develop dependencies"

  # update build details
  - ps: LogInfo "The build worker image is $env:APPVEYOR_BUILD_WORKER_IMAGE"
  - ps: |
      StartTimeInfo "generating build details ..."
      npx general-release preview -p appveyor --no-color
      $release = $($LastExitCode -eq 0)
      ExitErron $($LastExitCode -eq 1) 1 "pre-release with error`:` $LastExitCode"
      EndTimeInfo "generated build details"

before_build:
  - ps: StartTimeInfo "Compiling..."

build_script:
  - npm run package

after_build:
  - ps: EndTimeInfo "Compiled"

before_test:
  - ps: StartTimeInfo "Running Tests..."

test_script:
  # test on nodejs
  - ps: StartTimeInfo "Running Tests on Node$(node --version)..."
  - npm run unit:node
  - ps: EndTimeInfo "Run Tests on Node$(node --version)"

  # test on browsers
  - ps: StartTimeInfo "Running Tests on IE8,IE9,Chrome by Karma..."
  - npm run unit:browser -- --browsers IE8,IE9,Chrome --single-run
  - ps: EndTimeInfo "Run Tests on IE8,IE9,Chrome by Karma"

  # test on lower browsers
  - ps: StartTimeInfo "Running Tests on IE6,IE7 by Karma(no-iframe)..."
  - npm run unit:browser -- --browsers IE6,IE7 --single-run --no-iframe
  - ps: EndTimeInfo "Run Tests on IE6,IE7 by Karma(no-iframe)"

after_test:
  - ps: EndTimeInfo "Run all Tests"
  # upload coverage
  - ps: StartTimeInfo "Uploading coverage by codecov"
  - cat coverage/*/lcov.info | codecov
  - ps: EndTimeInfo "Uploaded coverage by codecov"

deploy_script:
  - ps: |
      if (!$evn:APPVEYOR_PULL_REQUEST_NUMBER -and $release) {
        StartTimeInfo "releasing ..."
        npx general-release
        ExitErron $($LastExitCode -eq 1) 1 "release with error`:` $LastExitCode"
        EndTimeInfo "released"
      }
